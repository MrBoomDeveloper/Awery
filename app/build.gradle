import groovy.json.JsonSlurper

plugins {
    id "com.android.application"
    id "kotlin-android"
}

def releaseVersion = "1.0.5.2"
def packageName = "com.mrboomdev.awery"
def targetSdk = 35
def minSdk = 25

// Note: Please, don't edit it if you don't know what it does
def startVersionCode = 2808
def startMillis = 1719658313080

def gitCommitHash = providers.exec {
    commandLine("git", "rev-parse", "--short", "HEAD")
}.standardOutput.asText.get().trim()

android {
    namespace packageName
    compileSdk targetSdk

    defaultConfig {
        applicationId packageName
        setMinSdk(minSdk)
        setTargetSdk(targetSdk)

        buildConfigField("boolean", "IS_BETA", "CHANNEL != ${packageName}.app.update.UpdatesChannel.STABLE")

        /* Only one version can be published per second or else horrible things will happen.
        *  After 70 years we'll be required to make Awery 2 because of an integer limit,
        *  Date receiver from the test below:
        *
        *   3865053756028  :  2145398250  -  Mon Jun 23 15:02:36 YEKT 2092
        *   3865747384956  :  2146091879  -  Tue Jul 01 15:43:04 YEKT 2092
        *   3866441013884  :  2146785508  -  Wed Jul 09 16:23:33 YEKT 2092
        *   3867134642812  :  2147479137  -  Thu Jul 17 17:04:02 YEKT 2092
        *   3867828271740  :  -2146794530  -  Fri Jul 25 17:44:31 YEKT 2092
        *  */
        versionName "$releaseVersion-$gitCommitHash"
        versionCode ((startVersionCode + ((System.currentTimeMillis() - startMillis) / 1000)) as int)

        /*long i = System.currentTimeMillis()
        var a = new Date(i)
        while(true) {
            i += (1000 * 60 * 60 * 24 * 356)
            a.setTime(i)

            versionCode ((startVersionCode + ((i - startMillis) / 1000)) as int)

            System.out.println("$i  :  $versionCode  -  ${a}")

            if(versionCode < 0 || versionCode >= Integer.MAX_VALUE) {
                throw new IllegalStateException("We've reached the end. Now Awery 2 must be released!" +
                        " Input: $versionCode : ${a}")
            }
        }*/

        if(versionCode < 0 || versionCode >= Integer.MAX_VALUE) {
            throw new IllegalStateException("We've reached the end. " +
                    "Now Awery 2 must be released! Input int: $versionCode")
        }

        buildConfigField("long", "BUILD_TIME", "${System.currentTimeMillis()}")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    androidResources {
        generateLocaleConfig true
    }

    sourceSets {
        main {
            assets.srcDirs += files("$projectDir/schemas".toString())
            java.srcDirs += file("$projectDir/awery_gen/main/java")
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            versionNameSuffix "-debug"
        }

        release {
            versionNameSuffix "-release"
            debuggable false
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions = [ "channel" ]

    productFlavors {
        alpha {
            isDefault true
            dimension "channel"
            versionNameSuffix "-alpha"
            applicationIdSuffix ".alpha"

            buildConfigField("${packageName}.app.update.UpdatesChannel", "CHANNEL", "${packageName}.app.update.UpdatesChannel.ALPHA")
            buildConfigField("String", "FILE_PROVIDER", "\"${packageName}.alpha.FileProvider\"")
            buildConfigField("String", "UPDATES_REPOSITORY", "\"itsmechinmoy/awery-updater\"")

            manifestPlaceholders.fileProvider = "${packageName}.alpha.FileProvider"
            manifestPlaceholders.appLabel = "Awery Alpha"
        }

        beta {
            dimension "channel"
            versionNameSuffix "-beta"
            applicationIdSuffix ".beta"

            buildConfigField("${packageName}.app.update.UpdatesChannel", "CHANNEL", "${packageName}.app.update.UpdatesChannel.BETA")
            buildConfigField("String", "FILE_PROVIDER", "\"${packageName}.beta.FileProvider\"")
            buildConfigField("String", "UPDATES_REPOSITORY", "\"MrBoomDeveloper/Awery\"")

            manifestPlaceholders.fileProvider = "${packageName}.beta.FileProvider"
            manifestPlaceholders.appLabel = "Awery Beta"
        }

        prod {
            dimension "channel"
            versionNameSuffix "-stable"

            buildConfigField("${packageName}.app.update.UpdatesChannel", "CHANNEL", "${packageName}.app.update.UpdatesChannel.STABLE")
            buildConfigField("String", "FILE_PROVIDER", "\"${packageName}.FileProvider\"")
            buildConfigField("String", "UPDATES_REPOSITORY", "\"MrBoomDeveloper/Awery\"")

            manifestPlaceholders.fileProvider = "${packageName}.FileProvider"
            manifestPlaceholders.appLabel = "Awery"
        }
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs = ["-Xcontext-receivers", "-Xmulti-platform"]
    }
}

dependencies {
    // Core
    implementation "androidx.core:core-ktx:1.13.1"
    implementation 'androidx.work:work-runtime-ktx:2.9.1'
    implementation "androidx.appcompat:appcompat:1.7.0"
    implementation "androidx.browser:browser:1.8.0"
    implementation "androidx.webkit:webkit:1.11.0"
    implementation "androidx.fragment:fragment-ktx:1.8.2"
    implementation "androidx.preference:preference-ktx:1.2.1"
    implementation "com.github.mrboomdeveloper:awerysdk:67856bbc66"
    implementation(project(":ext"))

    // Database
    def room_version = "2.6.1"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // UI
    implementation "androidx.core:core-splashscreen:1.0.1"
    implementation 'androidx.recyclerview:recyclerview:1.4.0-beta01'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "com.google.android.material:material:1.12.0"
    implementation "com.github.VipulOG:ebook-reader:0.1.6"
    implementation "com.github.emilaleborn:PageIndicatorView:905cd4e2ab"
    implementation "com.github.skydoves:colorpickerview:2.3.0"
    implementation 'com.github.skydoves:balloon:1.6.6'
    implementation 'com.rubensousa.dpadrecyclerview:dpadrecyclerview:1.3.0'
    implementation "nl.dionsegijn:konfetti-xml:2.0.4"
    implementation "nl.joery.animatedbottombar:library:1.1.0"

    // Markdown
    for(var moduleName : ["core", "editor", "ext-strikethrough", "html", "image", "image-glide", "linkify"]) {
        implementation "io.noties.markwon:$moduleName:4.6.2"
    }

    // Exoplayer
    for(var moduleName : ["exoplayer", "exoplayer-hls", "exoplayer-dash", "datasource-okhttp", "session", "ui"]) {
        implementation "androidx.media3:media3-$moduleName:1.3.1"
    }

    // Utils
    implementation "me.xdrop:fuzzywuzzy:1.4.0"
    implementation 'com.squareup.moshi:moshi:1.15.1'
    implementation "com.iqiyi.xcrash:xcrash-android-lib:3.1.0"
    implementation "net.sourceforge.streamsupport:android-retrostreams:1.7.4"

    // Image loading
    ext.glide_version = "4.16.0"
    api "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.github.bumptech.glide:annotations:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glide_version"
    implementation "com.github.piasy:BigImageViewer:1.8.1"
    implementation "com.github.piasy:GlideImageLoader:1.8.1"
    implementation "com.github.piasy:GlideImageViewFactory:1.8.1"

    // Networking
    ext.okhttp_version = '5.0.0-alpha.14'
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.okhttp3:okhttp-dnsoverhttps:$okhttp_version"
    implementation "com.squareup.okhttp3:okhttp-brotli:4.12.0"

    // JS extensions
    implementation "org.mozilla:rhino:1.7.15"
    implementation "com.caoccao.javet:swc4j:0.11.0"
    implementation 'com.caoccao.javet:javet-android-v8:3.1.5'

    // Aniyomi extensions
    ext.kotlin_serialization_verison = '1.7.2'
    implementation "app.cash.quickjs:quickjs-android:0.9.2"
    implementation "io.reactivex:rxjava:1.3.8"
    implementation "io.reactivex:rxandroid:1.2.1"
    implementation "uy.kohesive.injekt:injekt-core:1.16.1"
    implementation 'org.jsoup:jsoup:1.18.1'
    implementation "com.github.gpanther:java-nat-sort:natural-comparator-1.1"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlin_serialization_verison"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json-okio:$kotlin_serialization_verison"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-protobuf:$kotlin_serialization_verison"
}

static def writeFile(File file, String content) {
    try(var writer = new BufferedWriter(new FileWriter(file))) {
        writer.write(content)
    } catch(IOException e) {
        throw new IllegalStateException("Failed to read an file! " + file, e)
    }
}

static def readFile(File file) {
    try(var reader = new BufferedReader(new FileReader(file))) {
        var builder = new StringBuilder()
        String line

        while((line = reader.readLine()) != null) {
            builder.append(line)
        }

        return builder.toString()
    } catch(IOException e) {
        throw new IllegalStateException("Failed to read an file! " + file, e)
    }
}

static def toCamelCase(String text) {
    var result = ""

    for(String s : text.split("_")) {
        result += Character.toUpperCase(s.charAt(0))

        if(s.length() > 1) {
            result += s.substring(1, s.length()).toLowerCase()
        }
    }

    return result
}

static def formatKey(Object o, Set<String> usedKeys) {
    var result = "    public static final "

    if(o.type == "select" && o.items != null) {
        var enumName = toCamelCase(o.key.toUpperCase()) + "_Values"

        result = "\n" + result
        result += "EnumSetting<$enumName> ${o.key.toUpperCase()} = new EnumSetting<>(\"${o.key}\", ${enumName}.class);\n\n"

        result += "    public enum ${enumName} implements EnumWithKey {\n        "

        var iterator = o.items.iterator()

        while(iterator.hasNext()) {
            var item = iterator.next()

            if(item.key != null && !usedKeys.add(item.key)) {
                throw new IllegalStateException("Duplicate keys \"${item.key}\" were found in settings.json!" +
                        "\nYou have to remove one of them for app to work properly.")
            }

            result += item.key.toUpperCase() + "(\"${item.key}\")"

            if(iterator.hasNext()) {
                result += ", "
            }
        }

        result += ";\n\n        private final String key;\n\n        ${enumName}(String key) {\n"
        result += "            this.key = key;\n        }\n\n        @Override\n        public String getKey() {\n"
        result += "            return key;\n        }\n    }\n"

        return result
    }

    if(List.of("action", "select", "multiselect").contains(o.type)) {
        return result + "String ${o.key.toUpperCase()} = \"${o.key}\";\n"
    }

    switch(o.type) {
        case "string": result += "String"; break
        case [ "integer", "select_integer" ]: result += "Integer"; break
        case "boolean": result += "Boolean"; break
    }

    result += "Setting ${o.key.toUpperCase()} = () -> \"${o.key}\";\n"
    return result
}

static def collectKeys(Object from, Set<String> usedKeys) {
    if(from.key == null) {
        return ""
    }

    if(from.key != null && !usedKeys.add(from.key)) {
        throw new IllegalStateException("Duplicate keys \"${from.key}\" were found in settings.json!" +
                "\nYou have to remove one of them for app to work properly.")
    }

    var builder = new StringBuilder()

    switch(from.type) {
        case "screen": {
            for(Object item : from.items) {
                builder.append(collectKeys(item, usedKeys))
            }
        }; break

        case [ "string", "integer", "boolean", "action",
               "select", "select_integer", "multiselect"
        ] : builder.append(formatKey(from, usedKeys)); break
    }

    return builder.toString()
}

tasks.register("generateClasses") {
    def jsonSlurper = new JsonSlurper()
    def settings = jsonSlurper.parseText(readFile(file("$projectDir/src/main/assets/settings.json")))

    def dir = file("$projectDir/awery_gen/main/java/com/mrboomdev/awery/generated")
    dir.mkdirs()

    var builder = new StringBuilder()

    builder.append("package com.mrboomdev.awery.generated;\n" +
            "\n" +
            "import com.mrboomdev.awery.app.data.settings.NicePreferences.*;\n" +
            "\n" +
            "/**\n" +
            " * Auto-generated class created during the compilation. Please, do not edit it.\n" +
            " * @author MrBoomDev\n" +
            " */\n" +
            "public class AwerySettings {\n")

    builder.append(collectKeys(settings, new HashSet<String>()))
    builder.append("}")

    writeFile(new File(dir, "AwerySettings.java"), builder.toString())
}

preBuild.dependsOn generateClasses
