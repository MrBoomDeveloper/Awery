name: Testing Workflow

on:
  push:
    branches:
      - Test
    paths-ignore:
      - "docs/**"
      - "README.md"
      - "LICENSE.md"
      - ".github/workflows/bug_greetings.yml"
      - ".github/workflows/feature_greetings.yml"
      - ".github/workflows/pr_greetings.yml"
      - ".github/workflows/test_build.yml"
      - ".github/ISSUE_TEMPLATE/config.yml"
      - ".github/ISSUE_TEMPLATE/report_issue.yml"
      - ".github/ISSUE_TEMPLATE/request_feature.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      COMMIT_LOG: ""

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get install jq -y

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: Test.yml
          name: last-sha
          path: .
        continue-on-error: true

      - name: Get Commits Since Last Run
        run: |
          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
          else
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi

          echo "Commits since $LAST_SHA:"
          COMMIT_LOGS=$(git log "$LAST_SHA"..HEAD --pretty=format:"● %s ~%an [֍](https://github.com/Shebyyy/Awery/commit/%H)" --max-count=10)
          COMMIT_LOGS=$(echo "$COMMIT_LOGS" | sed -E 's/#([0-9]+)/[#\1](https:\/\/github.com\/rebelonion\/Dantotsu\/pull\/\1)/g')
          COMMIT_LOGS="${COMMIT_LOGS//'%'/'%25'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\n'/'%0A'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\r'/'%0D'}"

          echo "COMMIT_LOG=${COMMIT_LOGS}" >> $GITHUB_ENV
          echo "$COMMIT_LOGS" > commit_log.txt

          BRANCH=refs/heads/Test
          BRANCH=${BRANCH#refs/heads/}
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
        continue-on-error: true

      - name: Save Current SHA for Next Run
        run: echo ${{ github.sha }} > last_sha.txt

      - name: Set variables
        run: |
          VER=$(grep -E -o "versionName \".*\"" app/build.gradle | sed -e 's/versionName //g' | tr -d '"')
          SHA=${{ github.sha }}
          VERSION="$VER+${SHA:0:7}"
          echo "Version $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Setup JDK 17
        if: ${{ env.SKIP_BUILD != 'true' }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Upload APK to Discord and Telegram
        shell: bash
        run: |
          fetch_user_details() {
            local login=$1
            user_details=$(curl -s "https://api.github.com/users/$login")
            name=$(echo "$user_details" | jq -r '.name // .login')
            login=$(echo "$user_details" | jq -r '.login')
            avatar_url=$(echo "$user_details" | jq -r '.avatar_url')
            echo "$name|$login|$avatar_url"
          }

          # Additional `jq` usage in Discord data preparation
          discord_data=$(jq -nc \
            --arg field_value "$commit_messages" \
            --arg author_value "$developers" \
            --arg footer_text "Version $VERSION" \
            --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)" \
            --arg thumbnail_url "${top_contributor_avatar:-https://i.imgur.com/5o3Y9Jb.gif}" \
            --argjson embed_color "$embed_color" \
            '{
                "content": "<@&1225347048321191996>",
                "embeds": [
                    {
                        "title": "New Alpha-Build dropped",
                        "color": $embed_color,
                        "fields": [
                            {
                                "name": "Commits:",
                                "value": $field_value,
                                "inline": true
                            },
                            {
                                "name": "Developers:",
                                "value": $author_value,
                                "inline": false
                            }
                        ],
                        "footer": {
                            "text": $footer_text
                        },
                        "timestamp": $timestamp,
                        "thumbnail": {
                            "url": $thumbnail_url
                        }
                    }
                ],
                "attachments": []
            }')
        
          echo "Debug: Final Discord payload:"
          echo "$discord_data"

          # Send Discord message
          curl -H "Content-Type: application/json" \
               -d "$discord_data" \
               ${{ secrets.DISCORD_WEBHOOK }}

          # Additional steps for Telegram...
          
        env:
          COMMIT_LOG: ${{ env.COMMIT_LOG }}
          VERSION: ${{ env.VERSION }}

      - name: Upload Current SHA as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: last-sha
          path: last_sha.txt

      - name: Upload Commit log as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: commit-log
          path: commit_log.txt