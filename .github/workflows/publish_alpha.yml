name: Build & Publish Alpha APK

on:
  push:
    branches:
      - master
    paths-ignore:
      - "docs/**"
      - "README.md"
      - "LICENSE.md"
      - ".github/workflows/bug_greetings.yml"
      - ".github/workflows/feature_greetings.yml"
      - ".github/workflows/pr_greetings.yml"
      - ".github/workflows/test_build.yml"
      - ".github/ISSUE_TEMPLATE/config.yml"
      - ".github/ISSUE_TEMPLATE/report_issue.yml"
      - ".github/ISSUE_TEMPLATE/request_feature.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      COMMIT_LOG: ""
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: List Workflow Runs
        id: list_runs
        run: |
          WORKFLOW_ID=$(gh api repos/${{ github.repository }}/actions/workflows/publish_alpha.yml -q .id)
          LAST_RUN_ID=$(gh api repos/${{ github.repository }}/actions/workflows/$WORKFLOW_ID/runs \
            -q '.workflow_runs[1].id')
          echo "last_run_id=$LAST_RUN_ID" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: publish_alpha.yml
          name: last-sha
          path: .
        continue-on-error: true

      - name: Handle Missing SHA File
        run: |
          if [ ! -f last_sha.txt ] || [ ! -s last_sha.txt ]; then
            echo "Creating initial SHA file with 10 commits ago"
            git rev-list HEAD~10 -n 1 > last_sha.txt
          fi

      - name: Get New Commits Since Last Successful Run
        id: get_commits
        run: |
          LAST_SHA=$(cat last_sha.txt)
          if ! git rev-parse --quiet --verify "$LAST_SHA^{commit}" >/dev/null; then
            echo "Invalid SHA found, using last 10 commits"
            LAST_SHA=$(git rev-list HEAD~10 -n 1)
          fi
          echo "Using SHA: $LAST_SHA"
          COMMIT_COUNT=$(git rev-list --count $LAST_SHA..HEAD)
          if [ "$COMMIT_COUNT" -gt 10 ]; then
            echo "Too many commits, limiting to last 10"
            LAST_SHA=$(git rev-list HEAD~10 -n 1)
          fi
          COMMIT_LOGS=$(git log $LAST_SHA..HEAD --pretty=format:"‚óè %s ~%an [÷ç](https://github.com/${{ github.repository }}/commit/%H)")
          FORMATTED_COMMIT_LOGS=$(echo "$COMMIT_LOGS" | sed -E 's|Merge pull request #([0-9]+) from ([^ ]+)|Merge pull request <a href="https://github.com/${{ github.repository }}/pull/\1">#\1</a> from \2|g')
          echo "$FORMATTED_COMMIT_LOGS" > commit_log.txt
          echo "COMMIT_LOG<<EOF" >> $GITHUB_ENV
          echo "$FORMATTED_COMMIT_LOGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Alpha APK
        id: build_alpha
        run: ./gradlew assembleAlphaRelease

      - name: Sign Alpha APK
        if: success()
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/alpha/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Prepare Release Directory
        if: success()
        run: |
          RELEASE_DIR="release_artifacts"
          mkdir -p "$RELEASE_DIR"
          SOURCE_APK="app/build/outputs/apk/alpha/release/app-alpha-release-signed.apk"
          TARGET_APK="$RELEASE_DIR/awery-alpha.apk"
          cp "$SOURCE_APK" "$TARGET_APK"
          echo "APK_PATH=$TARGET_APK" >> $GITHUB_ENV
          echo "RELEASE_DIR=$RELEASE_DIR" >> $GITHUB_ENV

      - name: Upload to Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: "Alpha APK"
          path: ${{ env.RELEASE_DIR }}

      - name: Send to Telegram
        if: success()
        run: |
          COMMIT_LOG=$(cat commit_log.txt)
          if [ ${#COMMIT_LOG} -gt 1024 ]; then
            COMMIT_LOG="${COMMIT_LOG:0:900}... (truncated)"
          fi
          TRUNCATED_COMMIT_LOG="$COMMIT_LOG"
          telegram_commit_messages=$(echo "$TRUNCATED_COMMIT_LOG" | sed 's/%0A/\n/g' | sed -E 's/‚óè (.*) ~(.*) \[÷ç\]\((.*)\)/‚óè \1 ~\2 <a href="\3">÷ç<\/a>/')
          formatted_messages="<blockquote>${telegram_commit_messages}</blockquote>"
          curl -v -X POST \
          "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
          -F "chat_id=-1002206819738" \
          -F "message_thread_id=174" \
          -F "document=@$APK_PATH" \
          -F "caption=New Alpha-Build dropped üî•
          Commits:$formatted_messages" \
          -F "parse_mode=HTML"

      - name: Send Alpha APK to Discord
        if: success()
        run: |
          COMMIT_LOG=$(cat commit_log.txt)
          if [ ${#COMMIT_LOG} -gt 2000 ]; then
            TRUNCATED_LOG=$(echo "$COMMIT_LOG" | head -c 1800)
            LAST_COMPLETE=$(echo "$TRUNCATED_LOG" | grep -o "^‚óè.*$" | tail -n 1)
            if [ ! -z "$LAST_COMPLETE" ]; then
              LAST_POS=$(echo "$TRUNCATED_LOG" | grep -b -o "^$LAST_COMPLETE" | cut -d: -f1)
              COMMIT_LOG="${COMMIT_LOG:0:$LAST_POS}$LAST_COMPLETE"
            else
              COMMIT_LOG="${COMMIT_LOG:0:1800}... (truncated)"
            fi
          fi
          ESCAPED_COMMIT_LOG=$(echo "$COMMIT_LOG" | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/"/\\"/g')
          payload="{
            \"content\": \"<@&1208839371575529572>\",
            \"embeds\": [{
              \"title\": \"New Awery Alpha Update!\",
              \"description\": \"Commits:\\n${ESCAPED_COMMIT_LOG}\",
              \"color\": 5814783
            }]
          }"
          curl -H "Content-Type: application/json" \
            -d "$payload" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
          curl -H "Content-Type: multipart/form-data" \
            -F "file1=@$APK_PATH" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Save Current SHA for Next Run
        if: success()
        run: |
          echo ${{ github.sha }} > last_sha.txt
          cat last_sha.txt

      - name: Upload Current SHA as Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: last-sha
          path: last_sha.txt
          retention-days: 90

      - name: Upload Commit log as Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: commit-log
          path: commit_log.txt
