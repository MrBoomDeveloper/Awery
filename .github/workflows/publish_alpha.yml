name: Publish Alpha Apk

on:
  push:
    branches:
      - master
    paths-ignore:
      - "docs/**"
      - "README.md"
      - "LICENSE.md"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Retrieve Last Successful Commit SHA
        id: last_successful_sha
        run: |
          if [ -f last_successful_sha.txt ]; then
            LAST_SHA=$(cat last_successful_sha.txt)
          else
            LAST_SHA=$(git rev-list --max-parents=0 HEAD) # Get initial commit if no SHA exists
          fi
          echo "LAST_SHA=${LAST_SHA}" >> $GITHUB_ENV

      - name: Get New Commits Since Last Successful Run
        id: get_commits
        run: |
          echo "Retrieving commits since last successful SHA: ${{ env.LAST_SHA }}"
          COMMIT_LOGS=$(git log ${{ env.LAST_SHA }}..HEAD --pretty=format:"‚óè %s ~%an [÷ç](https://github.com/${{ github.repository }}/commit/%H)" --max-count=10)
          FORMATTED_COMMIT_LOGS=$(echo "$COMMIT_LOGS" | sed -E 's|#([0-9]+)|[#\1](https://github.com/${{ github.repository }}/pull/\1)|g')
          if [ ${#FORMATTED_COMMIT_LOGS} -gt 4096 ]; then
            FORMATTED_COMMIT_LOGS="${FORMATTED_COMMIT_LOGS:0:4093}... (truncated)"
          fi
          SANITIZED_COMMIT_LOGS=$(echo "$FORMATTED_COMMIT_LOGS" | tr -d '\n' | tr -d '\r' | sed 's/[^[:print:]]//g')
          echo "COMMIT_LOG=${SANITIZED_COMMIT_LOGS}" >> $GITHUB_ENV
          echo "$SANITIZED_COMMIT_LOGS" > commit_log.txt

      - name: Build Alpha APK
        id: build_alpha
        run: ./gradlew assembleAlphaRelease

      - name: Sign Alpha APK
        if: success()
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: "app/build/outputs/apk/alpha/release"
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Check if APK was created
        id: check_apk
        run: |
          if [ ! -f app/build/outputs/apk/alpha/release/app-alpha-release-signed.apk ]; then
            echo "APK file not found!"
            exit 1
          fi

      - name: Upload Alpha APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: "Alpha APK"
          retention-days: 90
          path: "app/build/outputs/apk/alpha/release/app-alpha-release-signed.apk"
    
    
      - name: Send Alpha APK to Telegram
        if: success()
        run: |
          curl -sS -f -X POST \
          "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
          -F "chat_id=${{ secrets.TELEGRAM_CHANNEL_ID }}" \
          -F "document=@app/build/outputs/apk/alpha/release/app-alpha-release-signed.apk" \
          -F "caption=Test Update\n\nCommits:\nTest commit message\nversion: 1.0" \
          -F "parse_mode=HTML" \
          -F "message_thread_id=28"

      - name: Upload APK to Discord and Telegram
        shell: bash
        run: |
        
        # Truncate field values
         max_length=1000
        commit_messages=$(echo "$COMMIT_LOG" | sed 's/%0A/\n/g; s/^/\n/')
        if [ ${#developers} -gt $max_length ]; then
          developers="${developers:0:$max_length}... (truncated)"
        fi
        if [ ${#commit_messages} -gt $max_length ]; then
          commit_messages="${commit_messages:0:$max_length}... (truncated)"
        fi

        # Construct Discord payload
        discord_data=$(jq -nc \
                      --arg field_value "$commit_messages" \
                      --arg author_value "$developers" \
                      --arg footer_text "Version $VERSION" \
                      --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)" \
                      --arg thumbnail_url "$thumbnail_url" \
                      --argjson embed_color "$embed_color" \
                      '{
                        "content": "<@&1225347048321191996>",
                        "embeds": [
                          {
                            "title": "New Alpha-Build dropped",
                            "color": $embed_color,
                            "fields": [
                              {
                                "name": "Commits:",
                                "value": $field_value,
                                "inline": true
                              },
                              {
                                "name": "Developers:",
                                "value": $author_value,
                                "inline": false
                              }
                            ],
                            "footer": {
                              "text": $footer_text
                            },
                            "timestamp": $timestamp,
                            "thumbnail": {
                              "url": $thumbnail_url
                            }
                          }
                        ],
                        "attachments": []
                      }')
        echo "Debug: Final Discord payload:"
        echo "$discord_data"
        
        # Send Discord message
        curl -H "Content-Type: application/json" \
             -d "$discord_data" \
             ${{ secrets.DISCORD_WEBHOOK }}
        echo "You have only send an embed to discord due to SKIP_BUILD being set to true"
        
        # Upload APK to Discord
        if [ "$SKIP_BUILD" != "true" ]; then
          curl -F "payload_json=${contentbody}" \
               -F "dantotsu_debug=@app/build/outputs/apk/google/alpha/app-google-alpha.apk" \
               ${{ secrets.DISCORD_WEBHOOK }}
        else
          echo "Skipping APK upload to Discord due to SKIP_BUILD being set to true"
        fi

        # Format commit messages for Telegram
        telegram_commit_messages=$(echo "$COMMIT_LOG" | sed 's/%0A/\n/g' | while read -r line; do
          message=$(echo "$line" | sed -E 's/‚óè (.*) ~(.*) \[÷ç\]\((.*)\)/‚óè \1 ~\2 <a href="\3">÷ç<\/a>/')
          message=$(echo "$message" | sed -E 's/\[#([0-9]+)\]\((https:\/\/github\.com\/[^)]+)\)/<a href="\2">#\1<\/a>/g')
          echo "$message"
        done)
        telegram_commit_messages="<blockquote>${telegram_commit_messages}</blockquote>"

        # Configuring dev info
        echo "$developers" > dev_info.txt
        echo "$developers"
        # making the file executable
        chmod +x workflowscripts/tel_parser.sed
        ./workflowscripts/tel_parser.sed dev_info.txt >> output.txt
        dev_info_tel=$(< output.txt)
        
        telegram_dev_info="<blockquote>${dev_info_tel}</blockquote>"
        echo "$telegram_dev_info"

        # Upload APK to Telegram
        if [ "$SKIP_BUILD" != "true" ]; then
          APK_PATH="app/build/outputs/apk/alpha/release/app-alpha-release-signed.apk"
          response=$(curl -sS -f -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
            -F "chat_id=${{ secrets.TELEGRAM_CHANNEL_ID }}" \
            -F "message_thread_id=7044" \
            -F "document=@$APK_PATH" \
            -F "caption=New Alpha-Build dropped üî•
        
        Commits:
        ${telegram_commit_messages}
        Dev:
        ${telegram_dev_info}
        version: ${VERSION}" \
            -F "parse_mode=HTML")
        else
          echo "skipping because skip build set to true"
        fi
        
      env:
        COMMIT_LOG: ${{ env.COMMIT_LOG }}
        VERSION: ${{ env.VERSION }}

    - name: Upload Current SHA as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: last-sha
        path: last_sha.txt

    - name: Upload Commit log as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: commit-log
        path: commit_log.txt
        
      - name: Send Alpha APK to Discord
        if: success()
        run: |
          COMMIT_LOG=$(cat commit_log.txt)
          payload="{
            \"content\": \"<@&1208839371575529572>\",
            \"embeds\": [{
              \"title\": \"New Awery Alpha Update!\",
              \"description\": \"Commits:\n ${COMMIT_LOG}\",
              \"color\": 5814783
            }]
          }"
          curl -H "Content-Type: application/json" \
            -d "$payload" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
          curl -H "Content-Type: multipart/form-data" \
            -F "file1=@app/build/outputs/apk/alpha/release/app-alpha-release-signed.apk" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Save Last Successful Commit SHA
        if: success()
        run: echo $GITHUB_SHA > last_successful_sha.txt
