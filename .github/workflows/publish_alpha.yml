name: Build & Publish Alpha Apk

on:
  push:
    branches:
      - master
    paths-ignore:
      - "docs/**"
      - "README.md"
      - "LICENSE.md"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Retrieve Last Successful Commit SHA
        id: last_successful_sha
        run: |
          if [ -f last_successful_sha.txt ]; then
            LAST_SHA=$(cat last_successful_sha.txt)
          else
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "LAST_SHA=${LAST_SHA}" >> $GITHUB_ENV

      - name: Get New Commits Since Last Successful Run
        id: get_commits
        run: |
          echo "Retrieving commits since last successful SHA: ${{ env.LAST_SHA }}"
          COMMIT_LOGS=$(git log ${{ env.LAST_SHA }}..HEAD --pretty=format:"● %s ~%an [֍](https://github.com/${{ github.repository }}/commit/%H)" --max-count=10)
          FORMATTED_COMMIT_LOGS=$(echo "$COMMIT_LOGS" | sed -E 's|#([0-9]+)|[#\1](https://github.com/${{ github.repository }}/pull/\1)|g')
          if [ ${#FORMATTED_COMMIT_LOGS} -gt 4096 ]; then
            FORMATTED_COMMIT_LOGS="${FORMATTED_COMMIT_LOGS:0:4093}... (truncated)"
          fi
          SANITIZED_COMMIT_LOGS=$(echo "$FORMATTED_COMMIT_LOGS" | tr -d '\n' | tr -d '\r' | sed 's/[^[:print:]]//g')
          echo "COMMIT_LOG=${SANITIZED_COMMIT_LOGS}" >> $GITHUB_ENV
          echo "$SANITIZED_COMMIT_LOGS" > commit_log.txt

      - name: Build Alpha APK
        id: build_alpha
        run: |
          ./gradlew assembleAlphaRelease || { echo 'Build failed'; exit 1; }

      - name: Sign Alpha APK
        if: success()
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: "app/build/outputs/apk/alpha/release"
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Move and Rename Signed APK
        if: success()
        run: |
          SOURCE_APK="app/build/outputs/apk/alpha/release/app-alpha-release-signed.apk"
          TARGET_DIR="app/build/outputs/apk/alpha"
          TARGET_APK="${TARGET_DIR}/app-alpha-release.apk"
          mkdir -p "${TARGET_DIR}"
          if [ ! -f "$SOURCE_APK" ]; then
            echo "Error: Source APK not found at $SOURCE_APK"
            ls -la app/build/outputs/apk/alpha/release/
            exit 1
          fi
          cp "$SOURCE_APK" "$TARGET_APK"
          if [ ! -f "$TARGET_APK" ]; then
            echo "Error: Failed to copy APK to $TARGET_APK"
            exit 1
          fi
          echo "APK_PATH=${TARGET_APK}" >> $GITHUB_ENV
          echo "Successfully copied APK to ${TARGET_APK}"
          ls -la "${TARGET_DIR}"

      - name: Upload Alpha APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: "Alpha APK"
          retention-days: 90
          path: ${{ env.APK_PATH }}

      - name: Send Alpha APK to Telegram
        if: success()
        run: |
          # Verify APK exists
          if [ ! -f "${{ env.APK_PATH }}" ]; then
            echo "Error: APK not found at ${{ env.APK_PATH }}"
            ls -la $(dirname "${{ env.APK_PATH }}")
            exit 1
          fi
          if [ ! -f "commit_log.txt" ]; then
            echo "Error: commit_log.txt not found"
            exit 1
          fi
          COMMIT_LOG=$(cat commit_log.txt)
          telegram_commit_messages=$(echo "$COMMIT_LOG" | while read -r line; do
            message=$(echo "$line" | sed -E 's/● (.*) ~(.*) ֍(.*)/● \1 ~\2 <a href="\3">֍<\/a>/')
            message=$(echo "$message" | sed -E 's/#([0-9]+) (https:\/\/github.com\/[^\/]+\/[^\/]+\/pull\/\1)/<a href="\2">#\1<\/a>/g')
            echo "$message"
          done)
          telegram_commit_messages="${telegram_commit_messages:0:1020}"
          telegram_message="<b>New Awery Alpha Update</b>%0A%0A<b>Commits:</b>%0A${telegram_commit_messages}"
          response=$(curl -v -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
            -F "chat_id=-1002206819738" \
            -F "document=@${{ env.APK_PATH }}" \
            -F "caption=${telegram_message}" \
            -F "parse_mode=HTML" \
            -F "disable_web_page_preview=true" \
            -F "message_thread_id=174" 2>&1)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to send to Telegram"
            echo "Curl response: $response"
            exit 1
          fi

      - name: Send Alpha APK to Discord
        if: success()
        run: |
          if [ ! -f "${{ env.APK_PATH }}" ]; then
            echo "Error: APK not found at ${{ env.APK_PATH }}"
            exit 1
          fi
          COMMIT_LOG=$(cat commit_log.txt)
          payload="{
            \"content\": \"<@&1208839371575529572>\",
            \"embeds\": [{
              \"title\": \"New Awery Alpha Update!\",
              \"description\": \"Commits:\n${COMMIT_LOG}\",
              \"color\": 5814783
            }]
          }"
          response=$(curl -H "Content-Type: application/json" \
            -d "$payload" \
            ${{ secrets.DISCORD_WEBHOOK_URL }} 2>&1)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to send Discord message"
            echo "Response: $response"
            exit 1
          fi
          response=$(curl -H "Content-Type: multipart/form-data" \
            -F "file=@${{ env.APK_PATH }}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }} 2>&1)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to send Discord file"
            echo "Response: $response"
            exit 1
          fi

      - name: Save Last Successful Commit SHA
        if: success()
        run: echo $GITHUB_SHA > last_successful_sha.txt
