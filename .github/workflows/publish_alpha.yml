name: Build & Publish Alpha APK

on:
  push:
    branches:
      - master
    paths-ignore:
      - "docs/**"
      - "README.md"
      - "LICENSE.md"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Retrieve Last Successful Commit SHA
        id: last_successful_sha
        run: |
          LAST_SHA=$(cat last_successful_sha.txt || git rev-list --max-parents=0 HEAD)
          echo "LAST_SHA=${LAST_SHA}" >> $GITHUB_ENV

      - name: Get New Commits Since Last Successful Run
        id: get_commits
        run: |
          COMMIT_LOGS=$(git log ${{ env.LAST_SHA }} ..HEAD --pretty=format:"‚óè %s ~%an [÷ç](https://github.com/${{ github.repository }}/commit/%H)" --max-count=10)
          FORMATTED_COMMIT_LOGS=$(echo "$COMMIT_LOGS" | sed -E 's|#([0-9]+)|[#\1](https://github.com/${{ github.repository }}/pull/\1)|g')
          SANITIZED_COMMIT_LOGS=$(echo "$FORMATTED_COMMIT_LOGS" | tr -cd '\11\12\15\40-\176')
          echo "$SANITIZED_COMMIT_LOGS" > commit_log.txt

      - name: Build Alpha APK
        id: build_alpha
        run: ./gradlew assembleAlphaRelease

      - name: Sign Alpha APK
        if: success()
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/alpha/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Prepare Release Directory
        if: success()
        run: |
          RELEASE_DIR="release_artifacts"
          mkdir -p "$RELEASE_DIR"
          SOURCE_APK="app/build/outputs/apk/alpha/release/app-alpha-release-signed.apk"
          TARGET_APK="$RELEASE_DIR/awery-alpha.apk"
          cp "$SOURCE_APK" "$TARGET_APK"
          echo "APK_PATH=$TARGET_APK" >> $GITHUB_ENV
          echo "RELEASE_DIR=$RELEASE_DIR" >> $GITHUB_ENV

      - name: Upload to Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: "Alpha APK"
          path: ${{ env.RELEASE_DIR }}

      - name: Send to Telegram
        if: success()
        run: |
          APK_PATH="${{ env.RELEASE_DIR }}/awery-alpha.apk"
          if [ ! -f "$APK_PATH" ]; then exit 1; fi
          if [ ! -f "commit_log.txt" ]; then exit 1; fi
          COMMIT_LOG=$(cat commit_log.txt)
          TRUNCATED_COMMIT_LOG="${COMMIT_LOG:0:900}"
          telegram_commit_messages=$(echo "$TRUNCATED_COMMIT_LOG" | sed 's/%0A/\n/g' | while read -r line; do
            message=$(echo "$line" | sed -E 's/‚óè (.*) ~(.*) \[÷ç\]\((.*)\)/‚óè \1 ~\2 <a href="\3">÷ç<\/a>/')
            message=$(echo "$message" | sed -E 's/\[#([0-9]+)\]\((https:\/\/github\.com\/[^)]+)\)/<a href="\2">#\1<\/a>/g')
            echo "$message"
          done)
          telegram_commit_messages="<blockquote>${telegram_commit_messages}</blockquote>"
          MESSAGE="${telegram_commit_messages}"
          MESSAGE="${MESSAGE:0:4000}"
          curl -v -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
            -F "chat_id=-1002066701332" \
            -F "message_thread_id=28" \
            -F "document=@$APK_PATH" \
            -F "caption=New Alpha-Build dropped üî•
            Latest Changes:
            ${MESSAGE}" \
            -F "parse_mode=HTML"

      - name: Send to Discord
        if: success()
        run: |
          APK_PATH="release_artifacts/awery-alpha.apk"
          COMMIT_LOG=$(cat commit_log.txt)
          TRUNCATED_COMMIT_LOG="${COMMIT_LOG:0:2000}"
          ESCAPED_COMMIT_LOG=$(echo "$TRUNCATED_COMMIT_LOG" | sed 's/"/\\"/g')
          PAYLOAD=$(cat <<EOF
          {
            "content": "<@&1208839371575529572>",
            "embeds": [{
              "title": "New Awery Alpha Update!",
              "description": "$ESCAPED_COMMIT_LOG",
              "color": 5814783
            }]
          }
          EOF
          )

          echo "Sending payload: $PAYLOAD"
          RESPONSE=$(curl -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "${{ secrets.DISCORD_WEBHOOK_URL }}")
          echo "Response: $RESPONSE"
          curl -F "file=@$APK_PATH" \
            "${{ secrets.DISCORD_WEBHOOK_URL }}"


      - name: Save Last Successful Commit SHA
        if: success()
        run: echo $GITHUB_SHA > last_successful_sha.txt
