name: Publish Alpha Apk 

on:
  push:
    branches:
      - master
    paths-ignore:
      - "docs/**"
      - "README.md"
      - "LICENSE.md"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Retrieve Last Successful Commit SHA
        id: last_successful_sha
        run: |
          if [ -f last_successful_sha.txt ]; then
            LAST_SHA=$(cat last_successful_sha.txt)
          else
            LAST_SHA=$(git rev-list --max-parents=0 HEAD) # Get initial commit if no SHA exists
          fi
          echo "LAST_SHA=${LAST_SHA}" >> $GITHUB_ENV

      - name: Get New Commits Since Last Successful Run
        id: get_commits
        run: |
          echo "Retrieving commits since last successful SHA: ${{ env.LAST_SHA }}"
          COMMIT_LOGS=$(git log ${{ env.LAST_SHA }}..HEAD --pretty=format:"● %s ~%an [֍](https://github.com/${{ github.repository }}/commit/%H)" --max-count=10)
          FORMATTED_COMMIT_LOGS=$(echo "$COMMIT_LOGS" | sed -E 's|#([0-9]+)|[#\1](https://github.com/${{ github.repository }}/pull/\1)|g')
          if [ ${#FORMATTED_COMMIT_LOGS} -gt 4096 ]; then
            FORMATTED_COMMIT_LOGS="${FORMATTED_COMMIT_LOGS:0:4093}... (truncated)"
          fi
          SANITIZED_COMMIT_LOGS=$(echo "$FORMATTED_COMMIT_LOGS" | tr -d '\n' | tr -d '\r' | sed 's/[^[:print:]]//g')
          echo "COMMIT_LOG=${SANITIZED_COMMIT_LOGS}" >> $GITHUB_ENV
          echo "$SANITIZED_COMMIT_LOGS" > commit_log.txt

      - name: Build Alpha APK
        id: build_alpha
        run: ./gradlew assembleAlphaRelease

      - name: Sign Alpha APK
        if: success()
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: "app/build/outputs/apk/alpha/release"
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Check if APK was created
        id: check_apk
        run: |
          if [ ! -f app/build/outputs/apk/alpha/release/app-alpha-release-signed.apk ]; then
            echo "APK file not found!"
            exit 1
          fi

      - name: Upload Alpha APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: "Alpha APK"
          retention-days: 90
          path: "app/build/outputs/apk/alpha/release/app-alpha-release-signed.apk"
    
      - name: Send Alpha APK to Telegram
        if: success()
        run: |
          COMMIT_LOG=$(cat commit_log.txt | sed 's/%0A/\n/g')
          COMMIT_LOG=$(echo "$COMMIT_LOG" | sed 's/[$&;!#|`*]//g')  # Removes special characters
          if [ ${#COMMIT_LOG} -gt 1000 ]; then
            COMMIT_LOG="${COMMIT_LOG:0:997}..."  # Truncate if too long
          fi
          telegram_commit_messages="<pre>${COMMIT_LOG}</pre>"
          curl -sS -f -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
            -F "chat_id=${{ secrets.TELEGRAM_CHANNEL_ID }}" \
            -F "document=@app/build/outputs/apk/alpha/release/app-alpha-release-signed.apk" \
            -F "caption=New Awery Alpha Update\n\nCommits:\n${telegram_commit_messages}\nversion: ${VERSION}" \
            -F "parse_mode=HTML" \
            -F "message_thread_id=28"

      - name: Send Alpha APK to Discord
        if: success()
        run: |
          COMMIT_LOG=$(cat commit_log.txt)
          payload="{
            \"content\": \"<@&1208839371575529572>\",
            \"embeds\": [{
              \"title\": \"New Awery Alpha Update!\",
              \"description\": \"Commits:\n${COMMIT_LOG}\",
              \"color\": 5814783
            }]
          }"
          curl -H "Content-Type: application/json" \
            -d "$payload" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
          curl -H "Content-Type: multipart/form-data" \
            -F "file1=@app/build/outputs/apk/alpha/release/app-alpha-release-signed.apk" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Save Last Successful Commit SHA
        if: success()
        run: echo $GITHUB_SHA > last_successful_sha.txt
